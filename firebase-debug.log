[debug] [2018-01-04T09:07:23.446Z] ----------------------------------------------------------------------
[debug] [2018-01-04T09:07:23.448Z] Command:       /usr/local/bin/node /usr/local/bin/firebase deploy
[debug] [2018-01-04T09:07:23.448Z] CLI Version:   3.15.0
[debug] [2018-01-04T09:07:23.448Z] Platform:      darwin
[debug] [2018-01-04T09:07:23.448Z] Node Version:  v8.7.0
[debug] [2018-01-04T09:07:23.448Z] Time:          Thu Jan 04 2018 01:07:23 GMT-0800 (PST)
[debug] [2018-01-04T09:07:23.448Z] ----------------------------------------------------------------------
[debug] 
[debug] [2018-01-04T09:07:23.464Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2018-01-04T09:07:23.464Z] > authorizing via signed-in user
[debug] [2018-01-04T09:07:23.466Z] > refreshing access token with scopes: ["email","https://www.googleapis.com/auth/cloud-platform","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","openid"]
[debug] [2018-01-04T09:07:23.466Z] >>> HTTP REQUEST POST https://www.googleapis.com/oauth2/v3/token { refresh_token: '1/t-Hp8b9MOtaDeMSImvXU1NO0Y7F0vMHjqeVfG0c6C5RjpO7Vf-d918B5uGFL64zy',
  client_id: '563584335869-fgrhgmd47bqnekij5i8b5pr03ho849e6.apps.googleusercontent.com',
  client_secret: 'j9iVZfS8kkCEFUPaAeJV0sAi',
  grant_type: 'refresh_token',
  scope: 'email https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloudplatformprojects.readonly https://www.googleapis.com/auth/firebase openid' } 
 Thu Jan 04 2018 01:07:23 GMT-0800 (PST)
[debug] [2018-01-04T09:07:23.818Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:23.833Z] >>> HTTP REQUEST GET https://admin.firebase.com/v1/projects/firechat-a3f10  
 Thu Jan 04 2018 01:07:23 GMT-0800 (PST)
[debug] [2018-01-04T09:07:24.171Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:24.172Z] >>> HTTP REQUEST GET https://admin.firebase.com/v1/database/firechat-a3f10/tokens  
 Thu Jan 04 2018 01:07:24 GMT-0800 (PST)
[debug] [2018-01-04T09:07:24.645Z] <<< HTTP RESPONSE 200
[info] 
[info] === Deploying to 'firechat-a3f10'...
[info] 
[info] i  deploying database, functions, hosting
[info] i  database: checking rules syntax...
[debug] [2018-01-04T09:07:24.977Z] >>> HTTP REQUEST PUT https://firechat-a3f10.firebaseio.com/.settings/rules.json?dryRun=true {
  "rules": {
    // By default, make all data private unless specified otherwise.
    ".read": false,
    ".write": false,
    "room-metadata": {
      ".read": true,
      "$roomId": {
        // Append-only by anyone, and admins can add official rooms, and edit or remove rooms as well.
        ".write": "(auth != null) && (!data.exists() || root.child('moderators').hasChild(auth.uid) || data.child('createdByUserId').val() === auth.uid)",
        ".validate": "newData.hasChildren(['name','type'])",
        "id": {
          ".validate": "(newData.val() === $roomId)"
        },
        "createdByUserId": {
          ".validate": "(auth.uid === newData.val())"
        },
        "numUsers": {
          ".validate": "(newData.isNumber())"
        },
        "type": {
          ".validate": "('public' === newData.val()) || 'private' === newData.val() || ('official' === newData.val() && (root.child('moderators').hasChild(auth.uid)))"
        },
        // A list of users that may read messages from this room.
        "authorizedUsers": {
          ".write": "(auth != null) && (!data.exists() || root.child('moderators').hasChild(auth.uid) || data.hasChild(auth.uid))"
        }
      }
    },
    "room-messages": {
      "$roomId": {
        // A list of messages by room, viewable by anyone for public rooms, or authorized users for private rooms.
        ".read": "(root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
        "SOURCE": {
          // A list of messages by room, viewable by anyone for public rooms, or authorized users for private rooms.
          ".read": "(root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
          "$msgId": {
            // Allow anyone to append to this list and allow admins to edit or remove.
            ".write": "(auth != null) && (data.val() === null || root.child('moderators').hasChild(auth.uid)) && (root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid)) && (!root.child('suspensions').hasChild(auth.uid) || root.child('suspensions').child(auth.uid).val() < now)",
            ".validate": "(newData.hasChildren(['userId','name','message','timestamp']))"
          }
        },
        "OUTPUT": {
          // A list of messages by room, viewable by anyone for public rooms, or authorized users for private rooms.
          ".read": "(root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
          "$msgId": {
            // Allow anyone to append to this list and allow admins to edit or remove.
            ".write": "(auth != null) && (data.val() === null || root.child('moderators').hasChild(auth.uid)) && (root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid)) && (!root.child('suspensions').hasChild(auth.uid) || root.child('suspensions').child(auth.uid).val() < now)",
            ".validate": "(newData.hasChildren(['userId','name','message','timestamp']))"
          },
          ".indexOn": ["language"]
        }
      }
    },
    "room-users": {
      "$roomId": {
        ".read": "(root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
        "$userId": {
          // A list of users by room, viewable by anyone for public rooms, or authorized users for private rooms.
          ".write": "(auth != null) && ($userId === auth.uid || root.child('moderators').hasChild(auth.uid))",
          "$sessionId": {
            ".validate": "(!newData.exists() || newData.hasChildren(['id','name']))"
          }
        }
      }
    },
    "users": {
      // A list of users and their associated metadata, which can be updated by the single user or a moderator.
      "$userId": {
        ".write": "(auth != null) && (auth.uid === $userId || (root.child('moderators').hasChild(auth.uid)))",
        ".read": "(auth != null) && (auth.uid === $userId || (root.child('moderators').hasChild(auth.uid)))",
        ".validate": "($userId === newData.child('id').val())",
        "invites": {
          // A list of chat invitations from other users, append-only by anyone.
          "$inviteId": {
            // Allow the user who created the invitation to read the status of the invitation.
            ".read": "(auth != null) && (auth.uid === data.child('fromUserId').val())",
            ".write": "(auth != null) && (!data.exists() || $userId === auth.uid || data.child('fromUserId').val() === auth.uid)",
            ".validate": "newData.hasChildren(['fromUserId','fromUserName','roomId']) && (newData.child('id').val() === $inviteId)"
          }
        },
        "notifications": {
          // A list of notifications, which can only be appended to by moderators.
          "$notificationId": {
            ".write": "(auth != null) && (data.val() === null) && (root.child('moderators').hasChild(auth.uid))",
            ".validate": "newData.hasChildren(['fromUserId','timestamp','notificationType'])",
            "fromUserId": {
              ".validate": "newData.val() === auth.uid"
            }
          }
        }
      }
    },
    "user-names-online": {
      // A mapping of active, online lowercase usernames to sessions and user ids.
      ".read": true,
      "$username": {
        "$sessionId": {
          ".write": "(auth != null) && (!data.exists() || !newData.exists() || data.child('id').val() === auth.uid)",
          "id": {
            ".validate": "(newData.val() === auth.uid)"
          },
          "name": {
            ".validate": "(newData.isString())"
          }
        }
      }
    },
    "moderators": {
      ".read": "(auth != null)"
    },
    "suspensions": {
      ".write": "(auth != null) && (root.child('moderators').hasChild(auth.uid))",
      ".read": "(auth != null) && (root.child('moderators').hasChild(auth.uid))"
    }
  }
}
 
 Thu Jan 04 2018 01:07:24 GMT-0800 (PST)
[debug] [2018-01-04T09:07:25.490Z] <<< HTTP RESPONSE 200
[info] âœ”  database: rules syntax for database firechat-a3f10 is valid
[debug] [2018-01-04T09:07:25.491Z] > [functions] package.json contents: {
  "name": "firechat-functions",
  "description": "Functions for demo Firechat application",
  "dependencies": {
    "firebase-admin": "^5.6.0",
    "firebase-functions": "^0.7.5",
    "@google-cloud/translate": "^1.1.0",
    "bad-words": "^1.6.1",
    "capitalize-sentence": "^0.1.5",
    "@google-cloud/firestore": "^0.10.1"
  },
  "private": true
}
[info] i  functions: ensuring necessary APIs are enabled...
[info] i  runtimeconfig: ensuring necessary APIs are enabled...
[debug] [2018-01-04T09:07:25.493Z] >>> HTTP REQUEST GET https://servicemanagement.googleapis.com/v1/services/cloudfunctions.googleapis.com/projectSettings/firechat-a3f10?view=CONSUMER_VIEW  
 Thu Jan 04 2018 01:07:25 GMT-0800 (PST)
[debug] [2018-01-04T09:07:25.493Z] >>> HTTP REQUEST GET https://servicemanagement.googleapis.com/v1/services/runtimeconfig.googleapis.com/projectSettings/firechat-a3f10?view=CONSUMER_VIEW  
 Thu Jan 04 2018 01:07:25 GMT-0800 (PST)
[debug] [2018-01-04T09:07:26.374Z] <<< HTTP RESPONSE 200
[info] âœ”  runtimeconfig: all necessary APIs are enabled
[debug] [2018-01-04T09:07:26.444Z] <<< HTTP RESPONSE 200
[info] âœ”  functions: all necessary APIs are enabled
[debug] [2018-01-04T09:07:26.445Z] >>> HTTP REQUEST GET https://appengine.googleapis.com/v1/apps/firechat-a3f10  
 Thu Jan 04 2018 01:07:26 GMT-0800 (PST)
[debug] [2018-01-04T09:07:26.446Z] >>> HTTP REQUEST GET https://apikeys.googleapis.com/v1/projects/firechat-a3f10/apiKeys  
 Thu Jan 04 2018 01:07:26 GMT-0800 (PST)
[debug] [2018-01-04T09:07:26.895Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:26.901Z] <<< HTTP RESPONSE 200
[info] i  functions: preparing functions directory for uploading...
[debug] [2018-01-04T09:07:32.039Z] >>> HTTP REQUEST GET https://runtimeconfig.googleapis.com/v1beta1/projects/firechat-a3f10/configs  
 Thu Jan 04 2018 01:07:32 GMT-0800 (PST)
[debug] [2018-01-04T09:07:32.256Z] <<< HTTP RESPONSE 200
[info] i  functions: packaged functions (30.63 KB) for uploading
[debug] [2018-01-04T09:07:34.501Z] >>> HTTP REQUEST GET https://www.googleapis.com/storage/v1/b/staging.firechat-a3f10.appspot.com  
 Thu Jan 04 2018 01:07:34 GMT-0800 (PST)
[debug] [2018-01-04T09:07:34.623Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:34.624Z] >>> HTTP REQUEST POST https://www.googleapis.com/upload/storage/v1/b/staging.firechat-a3f10.appspot.com/o?uploadType=media&name=firebase-functions-source ReadStream {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 65536,
     buffer: BufferList { head: [Object], tail: [Object], length: 1 },
     length: 31367,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: true,
     endEmitted: false,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: true,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: { end: [Function] },
  _eventsCount: 1,
  _maxListeners: undefined,
  path: '/var/folders/z8/xgc5x7c91wz93ywlzw14l28c008df4/T/firebase-functions-91506flrTPKlY2sg8.zip',
  fd: 19,
  flags: 'r',
  mode: 438,
  start: undefined,
  end: undefined,
  autoClose: true,
  pos: undefined,
  bytesRead: 31367 } 
 Thu Jan 04 2018 01:07:34 GMT-0800 (PST)
[debug] [2018-01-04T09:07:35.112Z] <<< HTTP RESPONSE 200
[info] âœ”  functions: functions folder uploaded successfully
[info] i  hosting: preparing dist directory for upload...
[debug] [2018-01-04T09:07:35.208Z] >>> HTTP REQUEST PUT https://deploy.firebase.com/v1/hosting/firechat-a3f10/uploads/-L2-QCUttV7dOQUdbpDI?fileCount=12&message=  
 Thu Jan 04 2018 01:07:35 GMT-0800 (PST)
[debug] [2018-01-04T09:07:36.886Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:36.886Z] [hosting] .tgz uploaded successfully, waiting for extraction
[info] âœ”  hosting: 12 files uploaded successfully
[info] i  database: releasing rules...
[debug] [2018-01-04T09:07:37.913Z] >>> HTTP REQUEST PUT https://firechat-a3f10.firebaseio.com/.settings/rules.json {
  "rules": {
    // By default, make all data private unless specified otherwise.
    ".read": false,
    ".write": false,
    "room-metadata": {
      ".read": true,
      "$roomId": {
        // Append-only by anyone, and admins can add official rooms, and edit or remove rooms as well.
        ".write": "(auth != null) && (!data.exists() || root.child('moderators').hasChild(auth.uid) || data.child('createdByUserId').val() === auth.uid)",
        ".validate": "newData.hasChildren(['name','type'])",
        "id": {
          ".validate": "(newData.val() === $roomId)"
        },
        "createdByUserId": {
          ".validate": "(auth.uid === newData.val())"
        },
        "numUsers": {
          ".validate": "(newData.isNumber())"
        },
        "type": {
          ".validate": "('public' === newData.val()) || 'private' === newData.val() || ('official' === newData.val() && (root.child('moderators').hasChild(auth.uid)))"
        },
        // A list of users that may read messages from this room.
        "authorizedUsers": {
          ".write": "(auth != null) && (!data.exists() || root.child('moderators').hasChild(auth.uid) || data.hasChild(auth.uid))"
        }
      }
    },
    "room-messages": {
      "$roomId": {
        // A list of messages by room, viewable by anyone for public rooms, or authorized users for private rooms.
        ".read": "(root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
        "SOURCE": {
          // A list of messages by room, viewable by anyone for public rooms, or authorized users for private rooms.
          ".read": "(root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
          "$msgId": {
            // Allow anyone to append to this list and allow admins to edit or remove.
            ".write": "(auth != null) && (data.val() === null || root.child('moderators').hasChild(auth.uid)) && (root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid)) && (!root.child('suspensions').hasChild(auth.uid) || root.child('suspensions').child(auth.uid).val() < now)",
            ".validate": "(newData.hasChildren(['userId','name','message','timestamp']))"
          }
        },
        "OUTPUT": {
          // A list of messages by room, viewable by anyone for public rooms, or authorized users for private rooms.
          ".read": "(root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
          "$msgId": {
            // Allow anyone to append to this list and allow admins to edit or remove.
            ".write": "(auth != null) && (data.val() === null || root.child('moderators').hasChild(auth.uid)) && (root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid)) && (!root.child('suspensions').hasChild(auth.uid) || root.child('suspensions').child(auth.uid).val() < now)",
            ".validate": "(newData.hasChildren(['userId','name','message','timestamp']))"
          },
          ".indexOn": ["language"]
        }
      }
    },
    "room-users": {
      "$roomId": {
        ".read": "(root.child('room-metadata').child($roomId).child('type').val() != 'private' || root.child('room-metadata').child($roomId).child('authorizedUsers').hasChild(auth.uid))",
        "$userId": {
          // A list of users by room, viewable by anyone for public rooms, or authorized users for private rooms.
          ".write": "(auth != null) && ($userId === auth.uid || root.child('moderators').hasChild(auth.uid))",
          "$sessionId": {
            ".validate": "(!newData.exists() || newData.hasChildren(['id','name']))"
          }
        }
      }
    },
    "users": {
      // A list of users and their associated metadata, which can be updated by the single user or a moderator.
      "$userId": {
        ".write": "(auth != null) && (auth.uid === $userId || (root.child('moderators').hasChild(auth.uid)))",
        ".read": "(auth != null) && (auth.uid === $userId || (root.child('moderators').hasChild(auth.uid)))",
        ".validate": "($userId === newData.child('id').val())",
        "invites": {
          // A list of chat invitations from other users, append-only by anyone.
          "$inviteId": {
            // Allow the user who created the invitation to read the status of the invitation.
            ".read": "(auth != null) && (auth.uid === data.child('fromUserId').val())",
            ".write": "(auth != null) && (!data.exists() || $userId === auth.uid || data.child('fromUserId').val() === auth.uid)",
            ".validate": "newData.hasChildren(['fromUserId','fromUserName','roomId']) && (newData.child('id').val() === $inviteId)"
          }
        },
        "notifications": {
          // A list of notifications, which can only be appended to by moderators.
          "$notificationId": {
            ".write": "(auth != null) && (data.val() === null) && (root.child('moderators').hasChild(auth.uid))",
            ".validate": "newData.hasChildren(['fromUserId','timestamp','notificationType'])",
            "fromUserId": {
              ".validate": "newData.val() === auth.uid"
            }
          }
        }
      }
    },
    "user-names-online": {
      // A mapping of active, online lowercase usernames to sessions and user ids.
      ".read": true,
      "$username": {
        "$sessionId": {
          ".write": "(auth != null) && (!data.exists() || !newData.exists() || data.child('id').val() === auth.uid)",
          "id": {
            ".validate": "(newData.val() === auth.uid)"
          },
          "name": {
            ".validate": "(newData.isString())"
          }
        }
      }
    },
    "moderators": {
      ".read": "(auth != null)"
    },
    "suspensions": {
      ".write": "(auth != null) && (root.child('moderators').hasChild(auth.uid))",
      ".read": "(auth != null) && (root.child('moderators').hasChild(auth.uid))"
    }
  }
}
 
 Thu Jan 04 2018 01:07:37 GMT-0800 (PST)
[debug] [2018-01-04T09:07:38.267Z] <<< HTTP RESPONSE 200
[info] âœ”  database: rules for database firechat-a3f10 released successfully
[debug] [2018-01-04T09:07:38.268Z] >>> HTTP REQUEST GET https://cloudfunctions.googleapis.com/v1beta2/projects/firechat-a3f10/locations/us-central1/functions  
 Thu Jan 04 2018 01:07:38 GMT-0800 (PST)
[debug] [2018-01-04T09:07:38.686Z] <<< HTTP RESPONSE 200
[info] i  functions: updating function createUserRecord...
[debug] [2018-01-04T09:07:38.688Z] Trigger is: 
[info] i  functions: updating function moderateText...
[debug] [2018-01-04T09:07:38.688Z] Trigger is: 
[info] i  functions: updating function translateText...
[debug] [2018-01-04T09:07:38.688Z] Trigger is: 
[debug] [2018-01-04T09:07:38.690Z] >>> HTTP REQUEST PUT https://cloudfunctions.googleapis.com/v1beta2/projects/firechat-a3f10/locations/us-central1/functions/createUserRecord { sourceArchiveUrl: 'gs://staging.firechat-a3f10.appspot.com/firebase-functions-source',
  name: 'projects/firechat-a3f10/locations/us-central1/functions/createUserRecord',
  entryPoint: 'createUserRecord',
  timeout: '60s',
  availableMemoryMb: 256,
  labels: { 'deployment-tool': 'cli-firebase' },
  eventTrigger: 
   { resource: 'projects/firechat-a3f10',
     eventType: 'providers/firebase.auth/eventTypes/user.create' } } 
 Thu Jan 04 2018 01:07:38 GMT-0800 (PST)
[debug] [2018-01-04T09:07:38.690Z] >>> HTTP REQUEST PUT https://cloudfunctions.googleapis.com/v1beta2/projects/firechat-a3f10/locations/us-central1/functions/moderateText { sourceArchiveUrl: 'gs://staging.firechat-a3f10.appspot.com/firebase-functions-source',
  name: 'projects/firechat-a3f10/locations/us-central1/functions/moderateText',
  entryPoint: 'moderateText',
  timeout: '60s',
  availableMemoryMb: 256,
  labels: { 'deployment-tool': 'cli-firebase' },
  eventTrigger: 
   { resource: 'projects/firechat-a3f10/databases/(default)/documents/room-messages/{roomId}/SOURCE/{messageId}',
     eventType: 'providers/cloud.firestore/eventTypes/document.create' } } 
 Thu Jan 04 2018 01:07:38 GMT-0800 (PST)
[debug] [2018-01-04T09:07:38.691Z] >>> HTTP REQUEST PUT https://cloudfunctions.googleapis.com/v1beta2/projects/firechat-a3f10/locations/us-central1/functions/translateText { sourceArchiveUrl: 'gs://staging.firechat-a3f10.appspot.com/firebase-functions-source',
  name: 'projects/firechat-a3f10/locations/us-central1/functions/translateText',
  entryPoint: 'translateText',
  timeout: '60s',
  availableMemoryMb: 256,
  labels: { 'deployment-tool': 'cli-firebase' },
  eventTrigger: 
   { resource: 'projects/firechat-a3f10/databases/(default)/documents/room-messages/{roomId}/TRANSLATE/{messageId}',
     eventType: 'providers/cloud.firestore/eventTypes/document.write' } } 
 Thu Jan 04 2018 01:07:38 GMT-0800 (PST)
[debug] [2018-01-04T09:07:39.344Z] <<< HTTP RESPONSE 400
[debug] [2018-01-04T09:07:39.344Z] <<< HTTP RESPONSE BODY
[warn] âš   functions: failed to update function translateText
[info] HTTP Error: 400, Change of function trigger type or event provider is not allowed
[debug] [2018-01-04T09:07:39.346Z] <<< HTTP RESPONSE 400
[debug] [2018-01-04T09:07:39.346Z] <<< HTTP RESPONSE BODY
[warn] âš   functions: failed to update function moderateText
[info] HTTP Error: 400, Change of function trigger type or event provider is not allowed
[debug] [2018-01-04T09:07:39.346Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:39.348Z] >>> HTTP REQUEST GET https://cloudfunctions.googleapis.com/v1beta2/operations/ZmlyZWNoYXQtYTNmMTAvdXMtY2VudHJhbDEvY3JlYXRlVXNlclJlY29yZC9pRUY3Z3BPNVBWZw  
 Thu Jan 04 2018 01:07:39 GMT-0800 (PST)
[debug] [2018-01-04T09:07:39.837Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:41.842Z] >>> HTTP REQUEST GET https://cloudfunctions.googleapis.com/v1beta2/operations/ZmlyZWNoYXQtYTNmMTAvdXMtY2VudHJhbDEvY3JlYXRlVXNlclJlY29yZC9pRUY3Z3BPNVBWZw  
 Thu Jan 04 2018 01:07:41 GMT-0800 (PST)
[debug] [2018-01-04T09:07:42.415Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:44.417Z] >>> HTTP REQUEST GET https://cloudfunctions.googleapis.com/v1beta2/operations/ZmlyZWNoYXQtYTNmMTAvdXMtY2VudHJhbDEvY3JlYXRlVXNlclJlY29yZC9pRUY3Z3BPNVBWZw  
 Thu Jan 04 2018 01:07:44 GMT-0800 (PST)
[debug] [2018-01-04T09:07:44.882Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:46.885Z] >>> HTTP REQUEST GET https://cloudfunctions.googleapis.com/v1beta2/operations/ZmlyZWNoYXQtYTNmMTAvdXMtY2VudHJhbDEvY3JlYXRlVXNlclJlY29yZC9pRUY3Z3BPNVBWZw  
 Thu Jan 04 2018 01:07:46 GMT-0800 (PST)
[debug] [2018-01-04T09:07:47.423Z] <<< HTTP RESPONSE 200
[debug] [2018-01-04T09:07:49.424Z] >>> HTTP REQUEST GET https://cloudfunctions.googleapis.com/v1beta2/operations/ZmlyZWNoYXQtYTNmMTAvdXMtY2VudHJhbDEvY3JlYXRlVXNlclJlY29yZC9pRUY3Z3BPNVBWZw  
 Thu Jan 04 2018 01:07:49 GMT-0800 (PST)
